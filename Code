// pin declaration
// Red
int red[] = {13, 12, 11, 10, 9, 8};

// Push Buttons
int btn[] = {2, 3, 4, 5, 6, 7};
// int btnRst = A5;
// One unconnected analog pin is needed to seed a random number
int randPin = A0;
// One enable pin is needed to turn off the green leds
int enablePin = A4;

// variable declarations
int leds[5];
int repeats = 10;	// number of cycles in the hypnosis
int spd = 1000;	// set the inital delay to 1000 mS
int respTime = 10000;	// delay for user to answer
int lastRndWon = 0;		// did the user win?

int userReds[5];

void setup(){
  // Seed a random number
  Serial.begin(9600);
  randomSeed(analogRead(randPin));
  
  // Red LEDs
  for(int i=0; i<6; i++){
    pinMode(red[i], OUTPUT);
  }
  // Push Buttons
  for(int j=0; j<6; j++){
    pinMode(btn[j], INPUT);
  }
  // RESET button
  // pinMode(btnRst, INPUT);
  // ENABLE pin
  pinMode(enablePin, INPUT);

  digitalWrite(enablePin, 1);
}

void loop(){
  Serial.println("New Loop");
  // hypnotize the player with flashing led array
  hypnotize();    
  // clear all lights and wait foruser answer
  clear();
  // user must press push buttons corresponding to the red 
  // leds in the final screen
  answer();
  // check if the user's answer matches the last screen shown
  evaluate();
  
  // set spd for the next round
  setSpd();
}
  
// flash leds "repeats" times in a random 
// sequence at frequency of "spd"
void hypnotize(){
  Serial.println("hypnotizeIn");
  for(int i = 0; i < repeats; i++){
    leds[i] = random(2);
    digitalWrite(red[i], leds[i]);
    Serial.print(i);
    Serial.print(": ");
    Serial.println(leds[i]);
    delay(spd);
  }
  
  Serial.println("FINAL LEDs: ");
  for(int j=0; j<6; j++){
    Serial.print(leds[j]);
  }
  Serial.println("");
  Serial.println("hypnotizeOut");
}

// sets all leds to red and waits "respTime" for user input
void clear(){
  Serial.println("clearIn");
  // Turn off both LEDs
  digitalWrite(enablePin, 0);
  for(int i=0; i<6; i++){
    digitalWrite(red[i], 0);
  }
  delay(respTime);	// 5 seconds to answer
  
  Serial.println("clearOut");
}

// user input through 6 DIP switches and a RESET/SUBMIT 
// pushbutton
void answer(){
  Serial.println("answerIn");
  for(int i=0; i<6;i++){
    userReds[i] = digitalRead(btn[i]);    
  }
  Serial.println("answerOut");
}

// evaluate the user's entry against the last led array shown
void evaluate(){
  Serial.println("evaluateIn");
  for (int i=0; i<6; i++){
    if(leds[i] != userReds[i]){	// user was wrong- Lose!
      // display all red leds and wait for the reset 
      // button to start game over
      for(int j=0; j<6; j++){
        digitalWrite(red[j], 1);
        lastRndWon = 0;
      } 
    }
    else	//user won- display all green and get rid to increase tempo 
      digitalWrite(enablePin, 1);
    for(int j=0; j<6; j++){
      digitalWrite(red[j], 0);
      lastRndWon = 1;
    }
    delay(spd);
  }
  Serial.println("evaluateOut");
}

// set the delay for the next round. Losers go back to standard
// "spd" of 1000mS. Winners have "spd" delay cut in half for next round.
void setSpd(){
  Serial.println("setSpdIn");
  if (lastRndWon == 0){	// user lost
    spd = 1000;			// reset spd
  }
  else{				// user won
    spd = spd/2;		// cut speed in half
  }
  Serial.println("setSpdOut");  
  
}
